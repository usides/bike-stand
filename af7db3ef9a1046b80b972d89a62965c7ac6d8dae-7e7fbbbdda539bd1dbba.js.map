{"version":3,"file":"af7db3ef9a1046b80b972d89a62965c7ac6d8dae-7e7fbbbdda539bd1dbba.js","mappings":"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","sources":["webpack://bike-stand/./node_modules/camelcase/index.js","webpack://bike-stand/./node_modules/clsx/dist/clsx.m.js","webpack://bike-stand/../src/image-utils.ts","webpack://bike-stand/../src/components/hooks.ts","webpack://bike-stand/../src/components/picture.tsx","webpack://bike-stand/../src/components/layout-wrapper.tsx","webpack://bike-stand/../src/components/placeholder.tsx","webpack://bike-stand/../src/components/main-image.tsx","webpack://bike-stand/../src/components/gatsby-image.browser.tsx","webpack://bike-stand/../src/components/gatsby-image.server.tsx","webpack://bike-stand/../src/components/static-image.server.tsx","webpack://bike-stand/../src/components/static-image.tsx","webpack://bike-stand/./src/components/ui/basket-button/basket-button.js","webpack://bike-stand/./src/components/ui/basket-button/basket-button.module.css","webpack://bike-stand/./src/components/ui/container/container.js","webpack://bike-stand/./src/constants/index.js","webpack://bike-stand/./src/components/ui/container/container.module.css","webpack://bike-stand/./src/components/ui/header/header.module.css","webpack://bike-stand/./src/components/ui/header/header.js","webpack://bike-stand/./src/components/ui/header/use-query-data-header.js","webpack://bike-stand/./src/components/ui/footer/footer.js","webpack://bike-stand/./src/components/ui/footer/use-query-data-footer.js","webpack://bike-stand/./src/components/ui/footer/footer.module.css","webpack://bike-stand/./src/components/ui/layout/layout.js","webpack://bike-stand/./src/components/ui/layout/layout.module.css","webpack://bike-stand/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","function r(e) {\n  var t,\n      f,\n      n = \"\";\n  if (\"string\" == typeof e || \"number\" == typeof e) n += e;else if (\"object\" == typeof e) if (Array.isArray(e)) for (t = 0; t < e.length; t++) {\n    e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n  } else for (t in e) {\n    e[t] && (n && (n += \" \"), n += t);\n  }\n  return n;\n}\n\nexport function clsx() {\n  for (var e, t, f = 0, n = \"\"; f < arguments.length;) {\n    (e = arguments[f++]) && (t = r(e)) && (n && (n += \" \"), n += t);\n  }\n\n  return n;\n}\nexport default clsx;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport * as st from \"./basket-button.module.css\";\n\nexport const BasketButton = ({ value, type, className, style, ...rest }) => {\n  return (\n    <button\n      type=\"button\"\n      {...rest}\n      style={{ ...style }}\n      className={clsx(\n        st.button,\n        {\n          [st.button_product]: type === \"product\",\n          [st.button_menu]: type === \"menu\",\n        },\n        className\n      )}\n    >\n      <p\n        className={clsx({\n          [st.button__text_product]: type === \"product\",\n          [st.button__text_menu]: type === \"menu\",\n        })}\n      >\n        {value}\n      </p>\n      <svg\n        width=\"43\"\n        height=\"40\"\n        viewBox=\"0 0 43 40\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className={clsx(st.button__svg, {\n          [st.button__svg_product]: type === \"product\",\n          [st.button__svg_menu]: type === \"menu\",\n        })}\n      >\n        <path d=\"M1.83699 3.81764C1.4624 3.80953 1.10595 3.65499 0.844257 3.38723C0.582562 3.11948 0.436514 2.75989 0.437505 2.38575C0.443712 2.01706 0.59315 1.6652 0.854271 1.40445C1.11539 1.14371 1.46776 0.994487 1.83699 0.988289H3.9052C5.10769 0.968851 6.29258 1.27833 7.33153 1.88322C9.2067 3.07072 9.54106 4.76764 10.0202 6.68141H41.388C41.7589 6.68232 42.1143 6.82984 42.3766 7.09172C42.6389 7.3536 42.7866 7.70853 42.7875 8.07888C42.7817 8.22478 42.7574 8.36936 42.7151 8.50913L39.0647 23.2273C38.9954 23.5385 38.82 23.816 38.5685 24.0125C38.3171 24.209 38.0051 24.3122 37.6859 24.3046H14.7461C15.2493 26.1668 15.7526 27.1684 16.4316 27.6331C17.2589 28.1803 18.7067 28.2079 21.0954 28.1803H37.3412C37.7124 28.1803 38.0683 28.3276 38.3308 28.5897C38.5933 28.8517 38.7407 29.2072 38.7407 29.5778C38.7407 29.9484 38.5933 30.3039 38.3308 30.566C38.0683 30.828 37.7124 30.9753 37.3412 30.9753H21.1196C18.1448 31.0097 16.3144 30.9374 14.846 29.9736C13.3776 29.0099 12.5503 27.251 11.7609 24.1222L6.96615 5.96547C6.96615 5.93105 6.96615 5.93105 6.92823 5.89319C6.86528 5.56675 6.73774 5.25613 6.55307 4.97952C6.3684 4.70292 6.13032 4.46589 5.85276 4.28231C5.25319 3.94645 4.57123 3.78545 3.88452 3.81764H1.83699ZM29.5234 12.4227C29.5698 12.1987 29.6922 11.9974 29.8699 11.853C30.0476 11.7085 30.2698 11.6296 30.4989 11.6296C30.728 11.6296 30.9502 11.7085 31.1279 11.853C31.3056 11.9974 31.428 12.1987 31.4744 12.4227V17.8302C31.428 18.0542 31.3056 18.2554 31.1279 18.3999C30.9502 18.5444 30.728 18.6233 30.4989 18.6233C30.2698 18.6233 30.0476 18.5444 29.8699 18.3999C29.6922 18.2554 29.5698 18.0542 29.5234 17.8302V12.4296V12.4227ZM23.6807 12.4227C23.7255 12.1968 23.8474 11.9934 24.0256 11.8472C24.2038 11.701 24.4273 11.6211 24.6579 11.6211C24.8886 11.6211 25.1121 11.701 25.2903 11.8472C25.4685 11.9934 25.5904 12.1968 25.6352 12.4227V17.8302C25.5904 18.0561 25.4685 18.2595 25.2903 18.4057C25.1121 18.5518 24.8886 18.6318 24.6579 18.6318C24.4273 18.6318 24.2038 18.5518 24.0256 18.4057C23.8474 18.2595 23.7255 18.0561 23.6807 17.8302V12.4296V12.4227ZM17.8415 12.4227C17.8879 12.1987 18.0103 11.9974 18.188 11.853C18.3657 11.7085 18.5878 11.6296 18.817 11.6296C19.0461 11.6296 19.2683 11.7085 19.4459 11.853C19.6236 11.9974 19.746 12.1987 19.7925 12.4227V17.8302C19.746 18.0542 19.6236 18.2554 19.4459 18.3999C19.2683 18.5444 19.0461 18.6233 18.817 18.6233C18.5878 18.6233 18.3657 18.5444 18.188 18.3999C18.0103 18.2554 17.8879 18.0542 17.8415 17.8302V12.4296V12.4227ZM32.2224 9.46946H10.8027L13.9946 21.4684H36.6311L39.6094 9.46946H32.2224ZM33.1462 32.6034C33.828 32.6034 34.4944 32.8052 35.0613 33.1834C35.6281 33.5617 36.0699 34.0992 36.3308 34.7282C36.5917 35.3571 36.66 36.0492 36.527 36.7169C36.394 37.3846 36.0657 37.9979 35.5836 38.4793C35.1015 38.9607 34.4873 39.2885 33.8187 39.4213C33.15 39.5541 32.4569 39.4859 31.8271 39.2254C31.1972 38.9649 30.6589 38.5237 30.2801 37.9577C29.9014 37.3916 29.6992 36.7262 29.6992 36.0454C29.6992 35.1325 30.0624 34.257 30.7088 33.6115C31.3552 32.966 32.232 32.6034 33.1462 32.6034ZM18.0483 32.6034C18.73 32.6034 19.3965 32.8052 19.9633 33.1834C20.5302 33.5617 20.972 34.0992 21.2329 34.7282C21.4938 35.3571 21.5621 36.0492 21.4291 36.7169C21.2961 37.3846 20.9678 37.9979 20.4857 38.4793C20.0036 38.9607 19.3894 39.2885 18.7208 39.4213C18.0521 39.5541 17.359 39.4859 16.7292 39.2254C16.0993 38.9649 15.561 38.5237 15.1822 37.9577C14.8034 37.3916 14.6013 36.7262 14.6013 36.0454C14.6013 35.1325 14.9644 34.257 15.6109 33.6115C16.2573 32.966 17.1341 32.6034 18.0483 32.6034Z\" />\n      </svg>\n    </button>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var button = \"basket-button-module--button--iWEif\";\nexport var button__svg = \"basket-button-module--button__svg--oZhXs\";\nexport var button__svg_menu = \"basket-button-module--button__svg_menu--+w+ZW\";\nexport var button__svg_product = \"basket-button-module--button__svg_product--DEzKw\";\nexport var button__text_menu = \"basket-button-module--button__text_menu---cpqn\";\nexport var button__text_product = \"basket-button-module--button__text_product--TPGXB\";\nexport var button_menu = \"basket-button-module--button_menu--FDm6G\";\nexport var button_product = \"basket-button-module--button_product--8kOy0\";","import React from \"react\";\nimport clsx from \"clsx\";\nimport { CONTAINER_WIDTH } from \"src/constants\";\nimport * as st from \"./container.module.css\";\n\nconst containerStyle = {\n  maxWidth: CONTAINER_WIDTH,\n};\n\nexport const Container = ({ className, style, children, ...rest }) => {\n  return (\n    <div\n      {...rest}\n      style={{ ...containerStyle, ...style }}\n      className={clsx(st.container, className)}\n    >\n      {children}\n    </div>\n  );\n};\n","export const CONTAINER_WIDTH = 1600;\n","// extracted by mini-css-extract-plugin\nexport var container = \"container-module--container--RYDmd\";","// extracted by mini-css-extract-plugin\nexport var basketButton = \"header-module--basket-button--h7Z-Y\";\nexport var header = \"header-module--header---Zj3o\";\nexport var navigation = \"header-module--navigation--ez8eP\";\nexport var navigation__divider = \"header-module--navigation__divider--zTg6b\";\nexport var navigation__item = \"header-module--navigation__item--eg2DD\";\nexport var navigation__link = \"header-module--navigation__link--HW2YC\";\nexport var navigation__link_active = \"header-module--navigation__link_active--yQY+1\";\nexport var navigation__list = \"header-module--navigation__list--ovMv7\";","import React, { Fragment } from \"react\";\nimport clsx from \"clsx\";\nimport * as st from \"./header.module.css\";\nimport { Link } from \"gatsby\";\nimport { Container } from \"../container\";\nimport { useQueryDataHeader } from \"./use-query-data-header\";\nimport { usePurchases } from \"src/contexts/purchases-context\";\nimport { BasketButton } from \"src/components/ui/basket-button\";\n\nexport const Header = ({ className, ...rest }) => {\n  const [links, brandLink] = useQueryDataHeader();\n  const { state } = usePurchases();\n\n  return (\n    <header className={clsx(st.header, className)} {...rest}>\n      <Container>\n        <nav className={st.navigation}>\n          <ul className={st.navigation__list}>\n            {links.map((link, idx) => (\n              <Fragment key={link.name}>\n                <li className={st.navigation__item}>\n                  <Link\n                    className={st.navigation__link}\n                    activeClassName={st.navigation__link_active}\n                    to={link.url}\n                  >\n                    {link.name}\n                  </Link>\n                </li>\n                {idx !== links.length - 1 && (\n                  <div className={st.navigation__divider} />\n                )}\n              </Fragment>\n            ))}\n          </ul>\n          <div className={st.navigation__item}>\n            <Link\n              className={clsx(st.navigation__link, st.navigation__link_active)}\n              to={brandLink.url}\n            >\n              {brandLink.name}\n            </Link>\n            <BasketButton\n              type=\"menu\"\n              value={state.length}\n              className={st.basketButton}\n            />\n            {/* <button style={{ marginLeft: \"10px\" }}>{state.length}</button> */}\n          </div>\n        </nav>\n      </Container>\n    </header>\n  );\n};\n","import { useStaticQuery, graphql } from \"gatsby\";\n\nexport const useQueryDataHeader = () => {\n  const {\n    dataJson: { header },\n  } = useStaticQuery(graphql`\n    query {\n      dataJson {\n        header {\n          brandLink {\n            name\n            url\n          }\n          links {\n            name\n            url\n          }\n        }\n      }\n    }\n  `);\n\n  return [header.links, header.brandLink];\n};\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport * as st from \"./footer.module.css\";\nimport { Container } from \"../container\";\nimport { useQueryDataFooter } from \"./use-query-data-footer\";\n\nexport const Footer = ({ className, ...rest }) => {\n  const blocks = useQueryDataFooter();\n\n  return (\n    <footer className={clsx(st.footer, className)} {...rest}>\n      <Container className={st.container}>\n        {blocks.map((block, idx) => (\n          <div key={idx}>\n            {block.map(\n              ({ lineHead, lineStyle, lineBody, lineSeparator }, idx) => (\n                <p\n                  key={idx}\n                  className={clsx(st.line, {\n                    [st.line_light]: lineStyle === \"light\" ? true : false,\n                    [st.line_dark]: lineStyle === \"dark\" ? true : false,\n                  })}\n                >\n                  {lineHead && (\n                    <span className={st.line__head}>{lineHead}</span>\n                  )}\n                  {lineSeparator}\n                  {lineBody}\n                </p>\n              )\n            )}\n          </div>\n        ))}\n      </Container>\n    </footer>\n  );\n};\n","import { useStaticQuery, graphql } from \"gatsby\";\n\nexport const useQueryDataFooter = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      dataJson {\n        footer {\n          blocks {\n            lineHead\n            lineSeparator\n            lineStyle\n            lineBody\n          }\n        }\n      }\n    }\n  `);\n\n  return data.dataJson.footer.blocks;\n};\n","// extracted by mini-css-extract-plugin\nexport var container = \"footer-module--container--jydwE\";\nexport var footer = \"footer-module--footer--YzKK5\";\nexport var line = \"footer-module--line--+FJmr\";\nexport var line__head = \"footer-module--line__head--HxolR\";\nexport var line_dark = \"footer-module--line_dark--f13s9\";\nexport var line_light = \"footer-module--line_light--GbVgy\";","import React from \"react\";\nimport * as st from \"./layout.module.css\";\nimport { Header } from \"../header\";\nimport { Footer } from \"../footer\";\n\nexport const Layout = ({ children }) => {\n  return (\n    <div className={st.layout}>\n      <Header />\n      <main className={st.layout__main}>{children}</main>\n      <Footer className={st.layout__footer} />\n    </div>\n  );\n};\n\nexport default Layout;\n","// extracted by mini-css-extract-plugin\nexport var layout = \"layout-module--layout--MEpCO\";\nexport var layout__footer = \"layout-module--layout__footer--+l++V\";\nexport var layout__main = \"layout-module--layout__main--Lik-c\";","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","r","e","t","f","n","arguments","height","prototype","node","images","_node$images","fallback","_node$images$fallback","src","Boolean","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","format","isLoading","isLoaded","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","children","props","Fragment","Sizer","q","H","P","srcSet","decoding","undefined","sizes","Image","media","type","key","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","warn","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","BasketButton","value","clsx","viewBox","xmlns","d","containerStyle","Container","navigation__item","navigation__link","navigation__link_active","Header","header","useStaticQuery","dataJson","links","brandLink","useQueryDataHeader","state","usePurchases","link","idx","name","st","activeClassName","to","url","Footer","blocks","footer","block","lineHead","lineStyle","lineBody","lineSeparator","Layout","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","keys","indexOf"],"sourceRoot":""}